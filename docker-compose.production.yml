version: '3'

volumes:
  pg_data_production:
  static_volume:
  media:
  redis_data:

services:
  db:
    image: postgres:13.10
    env_file: .env
    volumes:
      - pg_data_production:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    user: "0:0"
    image: egorovdocker/prestigecars_backend
    env_file: .env
    environment:
      - DOCKER_ENV=true
    volumes:
      - static_volume:/app/collected_static
      - media:/app/media/
    command: >
      sh -c "
        echo 'Collecting static files...' &&
        python manage.py collectstatic --clear --noinput --verbosity=1 &&
        echo 'Starting gunicorn server...' &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --access-logfile - --error-logfile - --log-level info
      "
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  gateway:
    image: egorovdocker/prestigecars_gateway
    env_file: .env
    volumes:
      - static_volume:/staticfiles:ro
      - media:/mediafiles:ro
    ports:
      - 8000:80
    depends_on:
      - backend
    restart: unless-stopped

  # === СЕРВИСЫ ОБСЛУЖИВАНИЯ ===

  redis-cleaner:
    image: redis:7
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
    restart: "no"
    profiles: ["maintenance"]
    command: >
      sh -c "
        echo 'Starting Redis cache cleanup...' &&
        redis-cli -h redis --eval - 0 <<EOF
        local keys = redis.call('keys', 'cache:*')
        for i=1,#keys,5000 do
            redis.call('del', unpack(keys, i, math.min(i+4999, #keys)))
        end
        return #keys
        EOF
        echo 'Redis cache cleaned'
      "

  db-backup:
    image: postgres:13.10
    env_file: .env
    volumes:
      - ./backups:/backups
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    profiles: ["maintenance"]
    command: >
      sh -c "
        echo 'Creating database backup...' &&
        pg_dump -h db -U ${POSTGRES_USER:-postgres} ${POSTGRES_DB:-prestigecars} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql &&
        echo 'Database backup created' &&
        find /backups -name 'backup_*.sql' -mtime +7 -delete &&
        echo 'Old backups cleaned up'
      "

  file-cleaner:
    image: alpine:latest
    volumes:
      - media:/app/media/
    restart: "no"
    profiles: ["maintenance"]
    command: >
      sh -c "
        echo 'Cleaning old files...' &&
        find /app/media/temp -type f -mtime +7 -delete 2>/dev/null || true &&
        echo 'File cleanup completed'
      "

  static-cleaner:
    image: alpine:latest
    volumes:
      - static_volume:/staticfiles
    restart: "no"
    profiles: ["maintenance"]
    command: >
      sh -c "
        echo 'Cleaning static files volume...' &&
        rm -rf /staticfiles/* || true &&
        echo 'Static files volume cleaned'
      "

  system-monitor:
    image: alpine:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: "no"
    profiles: ["monitoring"]
    command: >
      sh -c "
        apk add --no-cache docker-cli &&
        echo 'System Resource Usage:' &&
        docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}' &&
        echo '' &&
        echo 'Volume Usage:' &&
        docker system df -v | grep -E '(VOLUME NAME|prestigecars)' || true
      "

  docker-cleaner:
    image: docker:cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: "no"
    profiles: ["maintenance"]
    command: >
      sh -c "
        echo 'Cleaning Docker system...' &&
        docker system prune -f &&
        echo 'Docker system cleaned'
      "