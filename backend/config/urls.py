# backend/config/urls.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ì–ò–ë–ö–ò–ú–ò URL

import os

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ core –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from core.sitemaps import CompleteSitemap
from core.views import subscribe_to_newsletter
from django.conf import settings
from django.conf.urls.i18n import i18n_patterns
from django.contrib import admin
from django.contrib.sitemaps.views import sitemap
from django.http import HttpResponse
from django.urls import include, path, re_path
from django.views.decorators.http import require_GET
from django.views.i18n import set_language

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–ª–æ–≥–∞
try:
    from blog.feeds import AtomBlogFeed, BlogFeed
    from blog.sitemaps import BlogPostSitemap, CategorySitemap

    BLOG_AVAILABLE = True
except ImportError:
    BLOG_AVAILABLE = False

# --- Sitemap config ---
sitemaps = {
    "complete": CompleteSitemap,
}

if BLOG_AVAILABLE:
    sitemaps.update(
        {
            "blog_posts": BlogPostSitemap,
            "blog_categories": CategorySitemap,
        }
    )


# --- robots.txt ---
@require_GET
def robots_txt(request):
    lines = [
        "User-agent: *",
        "Allow: /",
        "",
        f"Sitemap: https://{request.get_host()}/sitemap.xml",
    ]
    if BLOG_AVAILABLE:
        lines.extend(
            [
                "",
                "# Blog RSS feeds",
                f"# RSS: https://{request.get_host()}/blog/feed/",
                f"# Atom: https://{request.get_host()}/blog/feed/atom/",
            ]
        )
    return HttpResponse("\n".join(lines), content_type="text/plain")


# --- URLs –±–µ–∑ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ---
urlpatterns = [
    path("robots.txt", robots_txt, name="robots_txt"),
    path("sitemap.xml", sitemap, {"sitemaps": sitemaps}, name="sitemap"),
    path("set-language/", set_language, name="set_language"),
    path("subscribe/", subscribe_to_newsletter, name="subscribe"),
    # Django admin
    path("admin/", admin.site.urls),
    path("", include("core.health")),  # –¥–∞—ë—Ç /health/
    path("ckeditor5/", include("django_ckeditor_5.urls")),  # –≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!
    # Django-Filer –º–∞—Ä—à—Ä—É—Ç—ã
    path("filer/", include("filer.urls")),
]

# –î–æ–±–∞–≤–ª—è–µ–º RSS feeds –¥–ª—è –±–ª–æ–≥–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if BLOG_AVAILABLE:
    urlpatterns.extend(
        [
            path("blog/feed/", BlogFeed(), name="blog_feed"),
            path("blog/feed/atom/", AtomBlogFeed(), name="blog_feed_atom"),
        ]
    )

# --- –Ø–∑—ã–∫–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ---
urlpatterns += i18n_patterns(
    # Blog –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –¥–ª—è /blog/ URL-–æ–≤
    path("blog/", include("blog.urls")),
    # TOURS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
    path("tours/", include(("tours.urls", "tours"), namespace="tours")),
    # Core –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ URL-—ã –≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    # –í–ê–ñ–ù–û: Core –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º catch-all patterns
    path("", include("core.urls")),
    prefix_default_language=False,
)

# === –ú–ï–î–ò–ê –§–ê–ô–õ–´ ===
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(settings.MEDIA_ROOT):
    os.makedirs(settings.MEDIA_ROOT, exist_ok=True)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–µ–¥–∏–∞-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {settings.MEDIA_ROOT}")

if settings.DEBUG:
    print("üêõ DEBUG=True: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ Django...")
    from django.conf.urls.static import static

    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

    if "django_browser_reload" in settings.INSTALLED_APPS:
        urlpatterns += [
            path("__reload__/", include("django_browser_reload.urls")),
        ]
else:
    print("üöÄ PRODUCTION MODE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –¥–ª—è production...")
    from django.views.static import serve

    urlpatterns += [
        re_path(
            r"^media/(?P<path>.*)$",
            serve,
            {"document_root": settings.MEDIA_ROOT},
        ),
    ]

print(f"üîß –ò—Ç–æ–≥–æ URL patterns: {len(urlpatterns)}")
print(f"üîß DEBUG: {settings.DEBUG}")
print(f"üîß MEDIA_URL: {settings.MEDIA_URL}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
handler404 = "core.views.custom_404"
handler500 = "core.views.custom_500"
