# flake8: noqa
import requests
from django.conf import settings
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = "Check if we are using correct business IDs for APIs"

    def handle(self, *args, **options):
        self.stdout.write("üîç –ü–†–û–í–ï–†–ö–ê ID –ë–ò–ó–ù–ï–°–ê")
        self.stdout.write("=" * 40)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Place ID
        self.check_google_place_id()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TripAdvisor –ø–æ–∏—Å–∫
        self.check_tripadvisor_search()

    def check_google_place_id(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º Google Place ID"""
        self.stdout.write("\nüîµ GOOGLE PLACES API:")
        self.stdout.write("-" * 25)

        api_key = getattr(settings, "GOOGLE_PLACES_API_KEY", "")
        place_id = getattr(settings, "GOOGLE_PLACE_ID", "")

        self.stdout.write(
            f"üîë API Key: {api_key[:10]}..." if api_key else "‚ùå No API key"
        )
        self.stdout.write(f"üÜî Place ID: {place_id}" if place_id else "‚ùå No Place ID")

        if api_key and place_id:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞
            url = "https://maps.googleapis.com/maps/api/place/details/json"
            params = {
                "place_id": place_id,
                "fields": "name,formatted_address,rating,user_ratings_total,reviews",
                "key": api_key,
            }

            try:
                response = requests.get(url, params=params, timeout=10)

                if response.status_code == 200:
                    data = response.json()

                    if data.get("status") == "OK":
                        result = data.get("result", {})
                        name = result.get("name", "Unknown")
                        address = result.get("formatted_address", "Unknown")
                        rating = result.get("rating", "N/A")
                        total_reviews = result.get("user_ratings_total", 0)
                        reviews = result.get("reviews", [])

                        self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω –±–∏–∑–Ω–µ—Å:")
                        self.stdout.write(f"   üìç –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                        self.stdout.write(f"   üè† –ê–¥—Ä–µ—Å: {address}")
                        self.stdout.write(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}")
                        self.stdout.write(f"   üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}")
                        self.stdout.write(f"   üìù –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")

                        if reviews:
                            self.stdout.write("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:")
                            for i, review in enumerate(reviews[:3], 1):
                                author = review.get("author_name", "Unknown")
                                text = review.get("text", "")[:60] + "..."
                                time_desc = review.get(
                                    "relative_time_description", "Unknown"
                                )
                                self.stdout.write(
                                    f"   {i}. {author} ({time_desc}): {text}"
                                )
                    else:
                        self.stdout.write(f'‚ùå Google API Error: {data.get("status")}')
                        if data.get("error_message"):
                            self.stdout.write(f'   üí¨ {data.get("error_message")}')
                else:
                    self.stdout.write(f"‚ùå HTTP Error: {response.status_code}")

            except Exception as e:
                self.stdout.write(f"üí• Exception: {str(e)}")

    def check_tripadvisor_search(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –≤ TripAdvisor"""
        self.stdout.write("\nüü¢ TRIPADVISOR API:")
        self.stdout.write("-" * 25)

        api_key = getattr(settings, "TRIPADVISOR_API_KEY", "")
        self.stdout.write(f"üîë API Key: {api_key}")

        if not api_key:
            self.stdout.write("‚ùå No TripAdvisor API key")
            return

        # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
        search_queries = [
            "Abroads Tours",
            "Abroads Tours Milan",
            "Milan day trips Abroads",
            "Lake Como tours Milan",
        ]

        for query in search_queries:
            self.stdout.write(f'\nüîç –ü–æ–∏—Å–∫: "{query}"')

            url = "https://api.content.tripadvisor.com/api/v1/location/search"
            params = {"key": api_key, "searchQuery": query, "language": "en"}

            try:
                response = requests.get(url, params=params, timeout=10)

                if response.status_code == 200:
                    data = response.json()
                    results = data.get("data", [])

                    if results:
                        self.stdout.write(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

                        for i, result in enumerate(results[:2], 1):
                            name = result.get("name", "Unknown")
                            location_id = result.get("location_id", "N/A")
                            address = result.get("address_obj", {}).get(
                                "address_string", "N/A"
                            )

                            self.stdout.write(f"   {i}. {name}")
                            self.stdout.write(f"      üÜî ID: {location_id}")
                            self.stdout.write(f"      üè† –ê–¥—Ä–µ—Å: {address}")

                            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–∑—ã–≤—ã
                            if i == 1:
                                self.check_tripadvisor_reviews(
                                    api_key, location_id, name
                                )
                    else:
                        self.stdout.write("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    self.stdout.write(f"   ‚ùå HTTP Error: {response.status_code}")

            except Exception as e:
                self.stdout.write(f"   üí• Exception: {str(e)}")

    def check_tripadvisor_reviews(self, api_key, location_id, business_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ TripAdvisor"""
        self.stdout.write(f'\n      üìù –û—Ç–∑—ã–≤—ã –¥–ª—è "{business_name}":')

        url = (
            f"https://api.content.tripadvisor.com/api/v1/location/{location_id}/reviews"
        )
        params = {"key": api_key, "language": "en", "limit": 3}

        try:
            response = requests.get(url, params=params, timeout=10)

            if response.status_code == 200:
                data = response.json()
                reviews = data.get("data", [])

                if reviews:
                    self.stdout.write(f"         ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

                    for j, review in enumerate(reviews, 1):
                        author = review.get("user", {}).get("username", "Unknown")
                        text = review.get("text", "")[:50] + "..."
                        date = review.get("published_date", "Unknown")

                        self.stdout.write(f"         {j}. {author} ({date}): {text}")
                else:
                    self.stdout.write("         ‚ùå –û—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                self.stdout.write(f"         ‚ùå Reviews Error: {response.status_code}")

        except Exception as e:
            self.stdout.write(f"         üí• Reviews Exception: {str(e)}")
