# flake8: noqa
from core.services.multi_reviews_service import MultiSourceReviewsService
from django.core.cache import cache
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = "Debug exactly where reviews are coming from and show their sources"

    def handle(self, *args, **options):
        self.stdout.write("üîç –û–¢–õ–ê–î–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í –û–¢–ó–´–í–û–í")
        self.stdout.write("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∫—ç—à–µ
        self.check_cached_reviews()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
        self.test_individual_sources()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.check_current_page_reviews()

    def check_cached_reviews(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"""
        self.stdout.write("\nüíæ –ó–ê–ö–≠–®–ò–†–û–í–ê–ù–ù–´–ï –û–¢–ó–´–í–´:")
        self.stdout.write("-" * 30)

        cache_key = "multi_reviews_page_1_7"
        cached_data = cache.get(cache_key)

        if cached_data:
            reviews = cached_data.get("reviews", [])
            self.stdout.write(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

            for i, review in enumerate(reviews, 1):
                author = review.get("author_name", "Unknown")
                source = review.get("source", "unknown")
                text_preview = review.get("text", "")[:50] + "..."
                date = review.get("relative_time_description", "No date")
                review_id = review.get("review_id", "No ID")

                source_icon = (
                    "üü¢"
                    if source == "tripadvisor"
                    else "üîµ" if source == "google" else "‚ö™"
                )

                self.stdout.write(f"\n{i}. {source_icon} {source.upper()}")
                self.stdout.write(f"   üë§ –ê–≤—Ç–æ—Ä: {author}")
                self.stdout.write(f"   üìÖ –î–∞—Ç–∞: {date}")
                self.stdout.write(f"   üÜî ID: {review_id}")
                self.stdout.write(f"   üí¨ –¢–µ–∫—Å—Ç: {text_preview}")
        else:
            self.stdout.write("‚ùå –ù–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

    def test_individual_sources(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ"""
        self.stdout.write("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í:")
        self.stdout.write("-" * 30)

        service = MultiSourceReviewsService()

        # –¢–µ—Å—Ç TripAdvisor
        self.stdout.write("\nüü¢ TripAdvisor API:")
        try:
            ta_reviews = service._fetch_tripadvisor_reviews()
            if ta_reviews:
                self.stdout.write(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(ta_reviews)} –æ—Ç–∑—ã–≤–æ–≤")
                for i, review in enumerate(ta_reviews[:3], 1):
                    author = review.get("author_name", "Unknown")
                    date = review.get("relative_time_description", "No date")
                    self.stdout.write(f"   {i}. {author} - {date}")
            else:
                self.stdout.write("   ‚ùå –û—Ç–∑—ã–≤—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        except Exception as e:
            self.stdout.write(f"   üí• –û—à–∏–±–∫–∞: {str(e)}")

        # –¢–µ—Å—Ç Google
        self.stdout.write("\nüîµ Google Places API:")
        try:
            google_reviews = service._fetch_google_reviews()
            if google_reviews:
                self.stdout.write(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(google_reviews)} –æ—Ç–∑—ã–≤–æ–≤")
                for i, review in enumerate(google_reviews[:3], 1):
                    author = review.get("author_name", "Unknown")
                    date = review.get("relative_time_description", "No date")
                    self.stdout.write(f"   {i}. {author} - {date}")
            else:
                self.stdout.write("   ‚ùå –û—Ç–∑—ã–≤—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        except Exception as e:
            self.stdout.write(f"   üí• –û—à–∏–±–∫–∞: {str(e)}")

    def check_current_page_reviews(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.stdout.write("\nüìÑ –¢–ï–ö–£–©–ê–Ø –°–¢–†–ê–ù–ò–¶–ê:")
        self.stdout.write("-" * 30)

        service = MultiSourceReviewsService()

        # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        service.clear_cache()
        current_data = service.get_reviews(page=1, per_page=7)

        if current_data and current_data.get("reviews"):
            reviews = current_data["reviews"]
            sources_used = current_data.get("sources_used", {})

            self.stdout.write(f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
            self.stdout.write(f"üîß –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_used}")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            by_source = {}
            for review in reviews:
                source = review.get("source", "unknown")
                if source not in by_source:
                    by_source[source] = []
                by_source[source].append(review)

            for source, source_reviews in by_source.items():
                source_icon = (
                    "üü¢"
                    if source == "tripadvisor"
                    else "üîµ" if source == "google" else "‚ö™"
                )
                self.stdout.write(
                    f"\n{source_icon} {source.upper()}: {len(source_reviews)} –æ—Ç–∑—ã–≤–æ–≤"
                )

                for review in source_reviews:
                    author = review.get("author_name", "Unknown")
                    date = review.get("relative_time_description", "No date")
                    text = review.get("text", "")[:80] + "..."
                    self.stdout.write(f"   ‚Ä¢ {author} ({date}): {text}")

        self.stdout.write("\n" + "=" * 50)
        self.stdout.write("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        self.stdout.write("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Place ID –¥–ª—è Google Places API")
        self.stdout.write(
            "2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TripAdvisor API –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –±–∏–∑–Ω–µ—Å—É"
        )
        self.stdout.write(
            "3. –°—Ä–∞–≤–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ —Å –≤–∞—à–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ Google/TripAdvisor"
        )
        self.stdout.write("4. –í–æ–∑–º–æ–∂–Ω–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∑—ã–≤—ã —Å –¥—Ä—É–≥–∏—Ö –ª–æ–∫–∞—Ü–∏–π")
